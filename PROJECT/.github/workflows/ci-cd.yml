name: PayGo CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Тестирование
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: paygo_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          cd web-service/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Install Node.js dependencies
        run: |
          cd web-service/frontend
          npm ci

      - name: Run backend tests
        run: |
          cd web-service/backend
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/paygo_test
          REDIS_URL: redis://localhost:6379

      - name: Run frontend tests
        run: |
          cd web-service/frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./web-service/backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./web-service/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Проверка безопасности
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          cd web-service/backend
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true

      - name: Run npm audit
        run: |
          cd web-service/frontend
          npm audit --audit-level moderate || true

  # Сборка Docker образов
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./web-service/backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./web-service/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Деплой в staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Здесь будет логика деплоя в staging
          # Например, обновление Docker Compose или Kubernetes

  # Деплой в production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Здесь будет логика деплоя в production

  # Уведомления
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "Pipeline completed successfully!"
          # Здесь можно добавить уведомления в Slack, Teams и т.д.

      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed!"
          # Здесь можно добавить уведомления об ошибках

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: Run performance tests
        run: |
          cd web-service/backend
          pytest tests/test_performance.py -v --benchmark-only

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: web-service/backend/.benchmarks/

  # Code quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Python linting
        run: |
          cd web-service/backend
          pip install flake8 black isort mypy
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .
          mypy .

      - name: Run Node.js linting
        run: |
          cd web-service/frontend
          npm run lint

      - name: Check code formatting
        run: |
          cd web-service/frontend
          npm run format:check

  # Dependency updates
  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check Python dependencies
        run: |
          cd web-service/backend
          pip install pip-review
          pip-review --local --output-format=json > deps.json
          echo "Dependencies checked"

      - name: Check Node.js dependencies
        run: |
          cd web-service/frontend
          npm outdated || true

  # Documentation
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build API documentation
        run: |
          cd web-service/backend
          pip install pdoc3
          pdoc --html --output-dir docs/api .

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: web-service/backend/docs/api/

  # Monitoring and alerts
  monitoring:
    name: Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Setup monitoring
        run: |
          echo "Setting up monitoring and alerting..."
          # Здесь можно добавить настройку мониторинга

      - name: Health check
        run: |
          echo "Performing health checks..."
          # Здесь можно добавить проверки здоровья системы
