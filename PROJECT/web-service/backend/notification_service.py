import asyncio
import logging
import json
from datetime import datetime
from typing import List, Dict, Optional
from enum import Enum
import aiohttp
from pydantic import BaseModel

logger = logging.getLogger(__name__)

class NotificationType(str, Enum):
    TRANSACTION_SUCCESS = "transaction_success"
    TRANSACTION_FAILED = "transaction_failed"
    SECURITY_ALERT = "security_alert"
    SYSTEM_UPDATE = "system_update"
    PAYMENT_REMINDER = "payment_reminder"

class NotificationPriority(str, Enum):
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class Notification(BaseModel):
    id: Optional[str] = None
    user_id: str
    type: NotificationType
    title: str
    message: str
    priority: NotificationPriority = NotificationPriority.NORMAL
    data: Optional[Dict] = None
    created_at: datetime = datetime.now()
    sent_at: Optional[datetime] = None
    is_read: bool = False

class PushNotificationService:
    def __init__(self):
        self.web_subscriptions: Dict[str, List[str]] = {}  # user_id -> [subscription_ids]
        self.mobile_tokens: Dict[str, List[str]] = {}      # user_id -> [device_tokens]
        
    async def subscribe_web_push(self, user_id: str, subscription_info: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if user_id not in self.web_subscriptions:
            self.web_subscriptions[user_id] = []
        
        if subscription_info not in self.web_subscriptions[user_id]:
            self.web_subscriptions[user_id].append(subscription_info)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    async def subscribe_mobile_push(self, user_id: str, device_token: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if user_id not in self.mobile_tokens:
            self.mobile_tokens[user_id] = []
        
        if device_token not in self.mobile_tokens[user_id]:
            self.mobile_tokens[user_id].append(device_token)
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    async def send_web_push(self, user_id: str, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if user_id not in self.web_subscriptions:
            return False
        
        success_count = 0
        for subscription in self.web_subscriptions[user_id]:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, web-push)
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                await self._send_web_push_impl(subscription, notification)
                success_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±-push –¥–ª—è {user_id}: {e}")
        
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return success_count > 0
    
    async def send_mobile_push(self, user_id: str, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if user_id not in self.mobile_tokens:
            return False
        
        success_count = 0
        for token in self.mobile_tokens[user_id]:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FCM (Firebase Cloud Messaging)
                await self._send_fcm_push(token, notification)
                success_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM –¥–ª—è {user_id}: {e}")
        
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –º–æ–±–∏–ª—å–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return success_count > 0
    
    async def send_notification(self, user_id: str, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        tasks = []
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±-push
        if user_id in self.web_subscriptions:
            tasks.append(self.send_web_push(user_id, notification))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ push
        if user_id in self.mobile_tokens:
            tasks.append(self.send_mobile_push(user_id, notification))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            success = any(result for result in results if isinstance(result, bool) and result)
            
            if success:
                notification.sent_at = datetime.now()
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            return success
        
        return False
    
    async def send_bulk_notifications(self, user_ids: List[str], notification: Notification):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        tasks = [self.send_notification(user_id, notification) for user_id in user_ids]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        success_count = sum(1 for result in results if isinstance(result, bool) and result)
        logger.info(f"üì¢ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {success_count}/{len(user_ids)} —É—Å–ø–µ—à–Ω–æ")
        
        return success_count
    
    async def _send_web_push_impl(self, subscription: str, notification: Notification):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±-push (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å web-push –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.debug(f"üåê –í–µ–±-push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {notification.title}")
    
    async def _send_fcm_push(self, token: str, notification: Notification):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM push (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.debug(f"üì± FCM push –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {notification.title}")
    
    def get_user_subscriptions(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "web_push": len(self.web_subscriptions.get(user_id, [])),
            "mobile_push": len(self.mobile_tokens.get(user_id, [])),
            "total": len(self.web_subscriptions.get(user_id, [])) + len(self.mobile_tokens.get(user_id, []))
        }
    
    async def unsubscribe_web_push(self, user_id: str, subscription_info: str):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if user_id in self.web_subscriptions and subscription_info in self.web_subscriptions[user_id]:
            self.web_subscriptions[user_id].remove(subscription_info)
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤–µ–±-push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def unsubscribe_mobile_push(self, user_id: str, device_token: str):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if user_id in self.mobile_tokens and device_token in self.mobile_tokens[user_id]:
            self.mobile_tokens[user_id].remove(device_token)
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –º–æ–±–∏–ª—å–Ω—ã—Ö push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = PushNotificationService()

