import pyotp
import qrcode
import io
import base64
import logging
import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Enum
from pydantic import BaseModel, EmailStr
import asyncio
import aiohttp

logger = logging.getLogger(__name__)

class TwoFactorMethod(str, Enum):
    TOTP = "totp"      # Time-based One-Time Password
    SMS = "sms"        # SMS –∫–æ–¥
    EMAIL = "email"    # Email –∫–æ–¥
    BACKUP_CODES = "backup_codes"  # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã

class TwoFactorConfig(BaseModel):
    # TOTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    totp_issuer: str = "PayGo"
    totp_algorithm: str = "sha1"
    totp_digits: int = 6
    totp_period: int = 30  # —Å–µ–∫—É–Ω–¥
    
    # SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    sms_provider: str = "twilio"  # twilio, sms.ru, etc.
    sms_code_length: int = 6
    sms_expiry_minutes: int = 5
    
    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    email_code_length: int = 6
    email_expiry_minutes: int = 10
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    max_attempts: int = 3
    lockout_duration_minutes: int = 15
    backup_codes_count: int = 10

class TOTPService:
    def __init__(self, config: TwoFactorConfig):
        self.config = config
    
    def generate_secret(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è TOTP"""
        return pyotp.random_base32()
    
    def generate_qr_code(self, secret: str, user_email: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è TOTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º URI –¥–ª—è TOTP
            totp_uri = pyotp.totp.TOTP(secret).provisioning_uri(
                name=user_email,
                issuer_name=self.config.totp_issuer
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(totp_uri)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            img_str = base64.b64encode(buffer.getvalue()).decode()
            
            return f"data:image/png;base64,{img_str}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {e}")
            return ""
    
    def verify_totp(self, secret: str, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ TOTP —Ç–æ–∫–µ–Ω–∞"""
        try:
            totp = pyotp.TOTP(secret)
            return totp.verify(token)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TOTP: {e}")
            return False
    
    def get_current_totp(self, secret: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ TOTP —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            totp = pyotp.TOTP(secret)
            return totp.now()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TOTP: {e}")
            return ""

class SMSService:
    def __init__(self, config: TwoFactorConfig):
        self.config = config
        self.sms_codes: Dict[str, Dict[str, Any]] = {}  # phone -> {code, expires, attempts}
    
    def generate_sms_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SMS –∫–æ–¥–∞"""
        return ''.join(secrets.choice('0123456789') for _ in range(self.config.sms_code_length))
    
    async def send_sms_code(self, phone: str, code: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
            self.sms_codes[phone] = {
                "code": code,
                "expires": datetime.now() + timedelta(minutes=self.config.sms_expiry_minutes),
                "attempts": 0
            }
            
            logger.info(f"üì± SMS –∫–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {phone}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ SMS API
            await self._send_sms_via_provider(phone, code)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
            return False
    
    async def _send_sms_via_provider(self, phone: str, code: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(0.1)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è:
        # - Twilio
        # - SMS.ru
        # - –î—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        
        logger.debug(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {self.config.sms_provider}: {phone} -> {code}")
    
    def verify_sms_code(self, phone: str, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞"""
        if phone not in self.sms_codes:
            return False
        
        sms_data = self.sms_codes[phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > sms_data["expires"]:
            del self.sms_codes[phone]
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if sms_data["attempts"] >= self.config.max_attempts:
            del self.sms_codes[phone]
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        sms_data["attempts"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if sms_data["code"] == code:
            del self.sms_codes[phone]  # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            return True
        
        return False

class EmailService:
    def __init__(self, config: TwoFactorConfig):
        self.config = config
        self.email_codes: Dict[str, Dict[str, Any]] = {}  # email -> {code, expires, attempts}
    
    def generate_email_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –∫–æ–¥–∞"""
        return ''.join(secrets.choice('0123456789') for _ in range(self.config.email_code_length))
    
    async def send_email_code(self, email: str, code: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∫–æ–¥–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
            self.email_codes[email] = {
                "code": code,
                "expires": datetime.now() + timedelta(minutes=self.config.email_expiry_minutes),
                "attempts": 0
            }
            
            logger.info(f"üìß Email –∫–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            await self._send_email_via_smtp(email, code)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    async def _send_email_via_smtp(self, email: str, code: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(0.1)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        logger.debug(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {email} -> {code}")
    
    def verify_email_code(self, email: str, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–¥–∞"""
        if email not in self.email_codes:
            return False
        
        email_data = self.email_codes[email]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > email_data["expires"]:
            del self.email_codes[email]
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if email_data["attempts"] >= self.config.max_attempts:
            del self.email_codes[email]
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        email_data["attempts"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if email_data["code"] == code:
            del self.email_codes[email]  # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            return True
        
        return False

class BackupCodesService:
    def __init__(self, config: TwoFactorConfig):
        self.config = config
    
    def generate_backup_codes(self) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–¥–æ–≤"""
        codes = []
        for _ in range(self.config.backup_codes_count):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∞: XXXX-XXXX
            code = f"{secrets.token_hex(2).upper()}-{secrets.token_hex(2).upper()}"
            codes.append(code)
        return codes
    
    def verify_backup_code(self, stored_codes: list[str], provided_code: str) -> tuple[bool, list[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–¥–∞"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–¥ (—É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized_code = provided_code.replace('-', '').upper()
        
        for i, code in enumerate(stored_codes):
            if code.replace('-', '').upper() == normalized_code:
                # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
                remaining_codes = stored_codes[:i] + stored_codes[i+1:]
                return True, remaining_codes
        
        return False, stored_codes

class TwoFactorAuth:
    def __init__(self, config: TwoFactorConfig):
        self.config = config
        self.totp_service = TOTPService(config)
        self.sms_service = SMSService(config)
        self.email_service = EmailService(config)
        self.backup_codes_service = BackupCodesService(config)
        
        # –ö—ç—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.locked_users: Dict[str, Dict[str, Any]] = {}
    
    async def setup_totp(self, user_id: str, user_email: str) -> Dict[str, str]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ TOTP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            secret = self.totp_service.generate_secret()
            qr_code = self.totp_service.generate_qr_code(secret, user_email)
            
            return {
                "secret": secret,
                "qr_code": qr_code,
                "backup_codes": self.backup_codes_service.generate_backup_codes()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TOTP –¥–ª—è {user_id}: {e}")
            raise
    
    async def send_sms_code(self, phone: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞"""
        code = self.sms_service.generate_sms_code()
        return await self.sms_service.send_sms_code(phone, code)
    
    async def send_email_code(self, email: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∫–æ–¥–∞"""
        code = self.email_service.generate_email_code()
        return await self.email_service.send_email_code(email, code)
    
    def verify_totp(self, secret: str, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ TOTP —Ç–æ–∫–µ–Ω–∞"""
        return self.totp_service.verify_totp(secret, token)
    
    def verify_sms_code(self, phone: str, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞"""
        return self.sms_service.verify_sms_code(phone, code)
    
    def verify_email_code(self, email: str, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–¥–∞"""
        return self.email_service.verify_email_code(email, code)
    
    def verify_backup_code(self, stored_codes: list[str], provided_code: str) -> tuple[bool, list[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–¥–∞"""
        return self.backup_codes_service.verify_backup_code(stored_codes, provided_code)
    
    def is_user_locked(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.locked_users:
            lock_info = self.locked_users[user_id]
            if datetime.now() < lock_info["until"]:
                return True
            else:
                del self.locked_users[user_id]
        return False
    
    def lock_user(self, user_id: str, reason: str = "too_many_attempts"):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        lock_until = datetime.now() + timedelta(minutes=self.config.lockout_duration_minutes)
        self.locked_users[user_id] = {
            "until": lock_until,
            "reason": reason
        }
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}")
    
    def get_remaining_attempts(self, user_id: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫"""
        if user_id in self.locked_users:
            return 0
        return self.config.max_attempts

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2FA
two_factor_config = TwoFactorConfig()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä 2FA —Å–µ—Ä–≤–∏—Å–∞
two_factor_auth = TwoFactorAuth(two_factor_config)


