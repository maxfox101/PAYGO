from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from typing import List, Optional
import asyncio
import logging

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import init_db, close_db, get_database, Database
from models.user import User, UserCreate, UserLogin, UserResponse
from models.terminal import Terminal, TerminalCreate, TerminalResponse
from models.transaction import Transaction, TransactionCreate, TransactionResponse
from models.card import Card, CardCreate, CardResponse

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
from routers.legal_documents import router as legal_documents_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ PayGo Backend...")
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã PayGo Backend...")
    await close_db()
    logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="PayGo API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ PayGo",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
)

# –°—Ö–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
security = HTTPBearer()

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_db():
    async with get_database() as database:
        yield database

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request, call_next):
    start_time = asyncio.get_event_loop().time()
    response = await call_next(request)
    process_time = asyncio.get_event_loop().time() - start_time
    
    logger.info(
        f"{request.method} {request.url.path} - "
        f"{response.status_code} - {process_time:.3f}s"
    )
    return response

# –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "PayGo Backend",
        "version": "1.0.0"
    }

@app.get("/api/info")
async def get_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "name": "PayGo",
        "description": "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤",
        "version": "1.0.0",
        "features": [
            "NFC –ø–ª–∞—Ç–µ–∂–∏",
            "QR-–∫–æ–¥—ã", 
            "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–Ω–∫–∞–º–∏ –†–§",
            "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        ]
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.post("/api/v1/users/register", response_model=UserResponse)
async def register_user(
    user_data: UserCreate,
    db: Database = Depends(get_db)
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await db.fetch_one(
            "SELECT id FROM users WHERE email = $1 OR phone = $2",
            user_data.email, user_data.phone
        )
        
        if existing_user:
            raise HTTPException(
                status_code=400,
                detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = await db.fetch_val(
            """
            INSERT INTO users (email, phone, full_name, hashed_password)
            VALUES ($1, $2, $3, $4) RETURNING id
            """,
            user_data.email,
            user_data.phone,
            user_data.full_name,
            f"$2b$12$hashed_{user_data.email}"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
        )
        
        return UserResponse(
            id=user_id,
            email=user_data.email,
            phone=user_data.phone,
            full_name=user_data.full_name,
            role="user",
            is_active=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/api/v1/auth/login")
async def login_user(
    credentials: UserLogin,
    db: Database = Depends(get_db)
):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db.fetch_one(
            "SELECT * FROM users WHERE email = $1 AND is_active = true",
            credentials.email
        )
        
        if not user:
            raise HTTPException(
                status_code=401,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            )
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        return {
            "access_token": f"jwt_token_for_{user['email']}",
            "token_type": "bearer",
            "user": {
                "id": user["id"],
                "email": user["email"],
                "full_name": user["full_name"],
                "role": user["role"]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/api/v1/users/me")
async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
    user = await db.fetch_one(
        "SELECT * FROM users WHERE email = $1",
        "nzosim@sfedu.ru"  # –ó–∞–≥–ª—É—à–∫–∞
    )
    
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return {
        "id": user["id"],
        "email": user["email"],
        "phone": user["phone"],
        "full_name": user["full_name"],
        "role": user["role"],
        "is_active": user["is_active"],
        "created_at": user["created_at"]
    }

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–∞—Ä—Ç
@app.get("/api/v1/cards", response_model=List[CardResponse])
async def get_user_cards(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        user = await db.fetch_one(
            "SELECT id FROM users WHERE email = $1",
            "nzosim@sfedu.ru"
        )
        
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        cards = await db.fetch_all(
            "SELECT * FROM cards WHERE user_id = $1 AND is_active = true ORDER BY is_primary DESC",
            user["id"]
        )
        
        return [
            CardResponse(
                id=card["id"],
                masked_number=card["masked_number"],
                bank_name=card["bank_name"],
                card_type=card["card_type"],
                is_primary=card["is_primary"],
                expires_at=card["expires_at"],
                is_active=card["is_active"]
            )
            for card in cards
        ]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/api/v1/cards", response_model=CardResponse)
async def add_user_card(
    card_data: CardCreate,
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Database = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        user = await db.fetch_one(
            "SELECT id FROM users WHERE email = $1",
            "nzosim@sfedu.ru"
        )
        
        if not user:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è
        if card_data.is_primary:
            await db.execute(
                "UPDATE cards SET is_primary = false WHERE user_id = $1",
                user["id"]
            )
        
        card_id = await db.fetch_val(
            """
            INSERT INTO cards (user_id, masked_number, bank_name, card_type, is_primary, expires_at, token)
            VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
            """,
            user["id"],
            card_data.masked_number,
            card_data.bank_name,
            card_data.card_type,
            card_data.is_primary,
            card_data.expires_at,
            f"token_{card_id}"
        )
        
        return CardResponse(
            id=card_id,
            masked_number=card_data.masked_number,
            bank_name=card_data.bank_name,
            card_type=card_data.card_type,
            is_primary=card_data.is_primary,
            expires_at=card_data.expires_at,
            is_active=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
@app.get("/api/v1/terminals", response_model=List[TerminalResponse])
async def get_terminals(
    status: Optional[str] = None,
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤"""
    try:
        query = "SELECT * FROM terminals WHERE is_active = true"
        params = []
        
        if status:
            query += " AND status = $1"
            params.append(status)
        
        query += " ORDER BY name"
        
        terminals = await db.fetch_all(query, *params)
        
        return [
            TerminalResponse(
                id=terminal["id"],
                serial_number=terminal["serial_number"],
                name=terminal["name"],
                location=terminal["location"],
                address=terminal["address"],
                status=terminal["status"],
                model=terminal["model"],
                manufacturer=terminal["manufacturer"],
                last_ping=terminal["last_ping"]
            )
            for terminal in terminals
        ]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.get("/api/v1/terminals/{terminal_id}")
async def get_terminal(
    terminal_id: int,
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        terminal = await db.fetch_one(
            "SELECT * FROM terminals WHERE id = $1",
            terminal_id
        )
        
        if not terminal:
            raise HTTPException(status_code=404, detail="–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db.fetch_one(
            """
            SELECT 
                COUNT(*) as total_transactions,
                COALESCE(SUM(amount), 0) as total_amount,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_transactions
            FROM transactions 
            WHERE terminal_id = $1
            """,
            terminal_id
        )
        
        return {
            "id": terminal["id"],
            "serial_number": terminal["serial_number"],
            "name": terminal["name"],
            "location": terminal["location"],
            "address": terminal["address"],
            "status": terminal["status"],
            "model": terminal["model"],
            "manufacturer": terminal["manufacturer"],
            "last_ping": terminal["last_ping"],
            "statistics": {
                "total_transactions": stats["total_transactions"],
                "total_amount": float(stats["total_amount"]),
                "successful_transactions": stats["successful_transactions"]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@app.get("/api/v1/transactions", response_model=List[TransactionResponse])
async def get_transactions(
    limit: int = 50,
    offset: int = 0,
    status: Optional[str] = None,
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
        user = await db.fetch_one(
            "SELECT id FROM users WHERE email = $1",
            "nzosim@sfedu.ru"
        )
        
        query = """
        SELECT t.*, c.masked_number, c.bank_name, term.name as terminal_name
        FROM transactions t
        LEFT JOIN cards c ON t.card_id = c.id
        LEFT JOIN terminals term ON t.terminal_id = term.id
        WHERE t.user_id = $1
        """
        params = [user["id"]]
        
        if status:
            query += " AND t.status = $2"
            params.append(status)
        
        query += " ORDER BY t.created_at DESC LIMIT $" + str(len(params) + 1) + " OFFSET $" + str(len(params) + 2)
        params.extend([limit, offset])
        
        transactions = await db.fetch_all(query, *params)
        
        return [
            TransactionResponse(
                id=tx["id"],
                amount=float(tx["amount"]),
                currency=tx["currency"],
                status=tx["status"],
                payment_method=tx["payment_method"],
                description=tx["description"],
                created_at=tx["created_at"],
                completed_at=tx["completed_at"],
                card_info={
                    "masked_number": tx["masked_number"],
                    "bank_name": tx["bank_name"]
                },
                terminal_info={
                    "name": tx["terminal_name"]
                }
            )
            for tx in transactions
        ]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@app.get("/api/v1/dashboard/stats")
async def get_dashboard_stats(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Database = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stats = await db.fetch_one(
            """
            SELECT 
                COUNT(DISTINCT u.id) as total_users,
                COUNT(DISTINCT t.id) as total_terminals,
                COUNT(DISTINCT tr.id) as total_transactions,
                COALESCE(SUM(tr.amount), 0) as total_amount
            FROM users u
            CROSS JOIN terminals t
            CROSS JOIN transactions tr
            """
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        recent_stats = await db.fetch_one(
            """
            SELECT 
                COUNT(*) as recent_transactions,
                COALESCE(SUM(amount), 0) as recent_amount
            FROM transactions
            WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
            """
        )
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
        terminal_status = await db.fetch_all(
            """
            SELECT status, COUNT(*) as count
            FROM terminals
            WHERE is_active = true
            GROUP BY status
            """
        )
        
        return {
            "total_users": total_stats["total_users"],
            "total_terminals": total_stats["total_terminals"],
            "total_transactions": total_stats["total_transactions"],
            "total_amount": float(total_stats["total_amount"]),
            "recent_transactions": recent_stats["recent_transactions"],
            "recent_amount": float(recent_stats["recent_amount"]),
            "terminal_status": {
                status["status"]: status["count"]
                for status in terminal_status
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
@app.get("/api/v1/currency/rates")
async def get_currency_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API
    return {
        "USD": {
            "rate": 91.45,
            "change": -0.23,
            "trend": "down"
        },
        "EUR": {
            "rate": 98.72,
            "change": 0.15,
            "trend": "up"
        },
        "CNY": {
            "rate": 12.63,
            "change": 0.42,
            "trend": "up"
        }
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={"error": "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "detail": str(exc)}
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 