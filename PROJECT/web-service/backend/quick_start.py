from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, validator
from typing import List, Optional
from datetime import datetime, timedelta
import hashlib
import secrets
import re
import random
import time

app = FastAPI(
    title="PayGo API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π PayGo —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π",
    version="2.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
sms_codes_db = {}
sessions_db = {}

# Data Models
class PhoneRegisterRequest(BaseModel):
    phone: str
    
    @validator('phone')
    def validate_phone(cls, v):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        phone_pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        if not re.match(phone_pattern, v):
            raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        return v

class SMSVerifyRequest(BaseModel):
    phone: str
    code: str

class UserRegistrationRequest(BaseModel):
    phone: str
    code: str
    first_name: str
    last_name: str
    middle_name: Optional[str] = None
    email: Optional[str] = None

class LoginRequest(BaseModel):
    phone: str

class User(BaseModel):
    id: int
    phone: str
    full_name: str
    email: Optional[str]
    balance: float
    registration_date: str
    is_verified: bool = True

class Transaction(BaseModel):
    id: int
    amount: float
    description: str
    created_at: str
    transaction_type: str
    status: str

class Card(BaseModel):
    id: int
    bank_name: str
    card_number: str
    cardholder_name: str
    expiry_date: str
    is_active: bool

# –£—Ç–∏–ª–∏—Ç—ã
def normalize_phone(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
    if digits.startswith('8') and len(digits) == 11:
        digits = '7' + digits[1:]
    elif digits.startswith('7') and len(digits) == 11:
        pass
    elif len(digits) == 10:
        digits = '7' + digits
    
    return '+' + digits

def generate_sms_code() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ SMS –∫–æ–¥–∞"""
    return str(random.randint(1000, 9999))

def send_sms(phone: str, code: str) -> bool:
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API SMS-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)"""
    print(f"üì± SMS –Ω–∞ {phone}: –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è PayGo: {code}")
    return True

def generate_session_token() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    return secrets.token_urlsafe(32)

def get_current_user(token: str = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    if not token or token not in sessions_db:
        return None
    
    session = sessions_db[token]
    if session['expires'] < datetime.now():
        del sessions_db[token]
        return None
    
    phone = session['phone']
    return users_db.get(phone)

# Sample data
sample_transactions = [
    Transaction(
        id=1,
        amount=-2450.00,
        description="–ú–∞–≥–Ω–∏—Ç",
        created_at="2025-08-08T14:23:00",
        transaction_type="purchase",
        status="completed"
    ),
    Transaction(
        id=2,
        amount=-45.00,
        description="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        created_at="2025-08-08T09:15:00",
        transaction_type="transport",
        status="completed"
    ),
    Transaction(
        id=3,
        amount=15000.00,
        description="–ó–∞—Ä–ø–ª–∞—Ç–∞",
        created_at="2025-08-07T16:00:00",
        transaction_type="income",
        status="completed"
    )
]

sample_cards = [
    Card(
        id=1,
        bank_name="–¢‚Äë–ë–∞–Ω–∫",
        card_number="**** **** **** 1234",
        cardholder_name="NIKITA ZOSIM",
        expiry_date="12/28",
        is_active=True
    ),
    Card(
        id=2,
        bank_name="–í–¢–ë",
        card_number="**** **** **** 5678",
        cardholder_name="NIKITA ZOSIM",
        expiry_date="10/27",
        is_active=True
    )
]

# API Endpoints

@app.get("/api/health")
def health_check():
    return {
        "status": "healthy",
        "service": "PayGo Backend API",
        "version": "2.0.0",
        "timestamp": datetime.now().isoformat(),
        "features": ["registration", "sms_verification", "authentication"]
    }

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

@app.post("/api/v1/auth/register/phone")
def register_phone(request: PhoneRegisterRequest):
    """–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        normalized_phone = normalize_phone(request.phone)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        sms_code = generate_sms_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
        sms_codes_db[normalized_phone] = {
            'code': sms_code,
            'expires': datetime.now() + timedelta(minutes=5),
            'attempts': 0
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
        if send_sms(normalized_phone, sms_code):
            return {
                "success": True,
                "message": "SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                "phone": normalized_phone,
                "expires_in": 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            }
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")
            
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/v1/auth/verify/sms")
def verify_sms_code(request: SMSVerifyRequest):
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞"""
    try:
        normalized_phone = normalize_phone(request.phone)
        
        if normalized_phone not in sms_codes_db:
            raise HTTPException(status_code=400, detail="–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫")
        
        sms_data = sms_codes_db[normalized_phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if sms_data['expires'] < datetime.now():
            del sms_codes_db[normalized_phone]
            raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if sms_data['attempts'] >= 3:
            del sms_codes_db[normalized_phone]
            raise HTTPException(status_code=400, detail="–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if sms_data['code'] != request.code:
            sms_data['attempts'] += 1
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del sms_codes_db[normalized_phone]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = normalized_phone in users_db
        
        return {
            "success": True,
            "verified": True,
            "user_exists": user_exists,
            "phone": normalized_phone
        }
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/v1/auth/register/complete")
def complete_registration(request: UserRegistrationRequest):
    """–®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        normalized_phone = normalize_phone(request.phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if normalized_phone in users_db:
            raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_name = f"{request.last_name} {request.first_name}"
        if request.middle_name:
            full_name += f" {request.middle_name}"
        
        user = User(
            id=len(users_db) + 1,
            phone=normalized_phone,
            full_name=full_name,
            email=request.email,
            balance=0.0,
            registration_date=datetime.now().isoformat(),
            is_verified=True
        )
        
        users_db[normalized_phone] = user
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        token = generate_session_token()
        sessions_db[token] = {
            'phone': normalized_phone,
            'expires': datetime.now() + timedelta(days=30)
        }
        
        return {
            "success": True,
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "access_token": token,
            "token_type": "bearer",
            "user": user.dict()
        }
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/v1/auth/login")
def login_user(request: LoginRequest):
    """–í—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        normalized_phone = normalize_phone(request.phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if normalized_phone not in users_db:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users_db[normalized_phone]
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        token = generate_session_token()
        sessions_db[token] = {
            'phone': normalized_phone,
            'expires': datetime.now() + timedelta(days=30)
        }
        
        return {
            "success": True,
            "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "access_token": token,
            "token_type": "bearer",
            "user": user.dict()
        }
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/v1/auth/logout")
def logout_user(token: str):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if token in sessions_db:
        del sessions_db[token]
    
    return {"success": True, "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

# –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/api/v1/users/me")
def get_current_user_info(token: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = get_current_user(token)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    return user

@app.get("/api/v1/transactions")
def get_user_transactions(token: str = None, limit: Optional[int] = 10):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_current_user(token)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    return sample_transactions[:limit]

@app.get("/api/v1/cards")
def get_user_cards(token: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_current_user(token)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    return sample_cards

@app.get("/api/v1/stats")
def get_user_statistics(token: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = get_current_user(token)
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    
    return {
        "total_transactions": len(sample_transactions),
        "active_cards": len([card for card in sample_cards if card.is_active]),
        "current_balance": user.balance,
        "success_rate": 99.2
    }

# –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/api/v1/support/contacts")
def get_support_contacts():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    return {
        "phone": "8 (800) 555-35-35",
        "email": "support@paygo.ru",
        "chat_available": True,
        "working_hours": "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ",
        "response_time": "–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
    }

@app.get("/api/v1/currency/rates")
def get_currency_rates():
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    return {
        "USD": {"rate": 91.83, "change": 0.09},
        "EUR": {"rate": 98.21, "change": -0.1},
        "CNY": {"rate": 12.78, "change": 0.08}
    }

# –î–µ–º–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@app.get("/api/v1/demo/users")
def get_demo_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)"""
    return {
        "users": list(users_db.values()),
        "total": len(users_db)
    }

@app.get("/api/v1/demo/sessions")
def get_demo_sessions():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ)"""
    active_sessions = []
    current_time = datetime.now()
    
    for token, session in sessions_db.items():
        if session['expires'] > current_time:
            active_sessions.append({
                "token": token[:10] + "...",
                "phone": session['phone'],
                "expires": session['expires'].isoformat()
            })
    
    return {
        "active_sessions": active_sessions,
        "total": len(active_sessions)
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ PayGo Backend API —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...")
    print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8000/api/health")
    print("üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: http://localhost:8000/api/v1/auth/register/phone")
    uvicorn.run(app, host="0.0.0.0", port=8000) 